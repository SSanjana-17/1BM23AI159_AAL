

#include <stdio.h>
#include <limits.h>

#define V 9  
int main() {
   
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };
    int i,count,v;

    int dist[V]; 
    int sptSet[V];
    int parent[V];
    for ( i = 0; i < V; i++) {
        dist[i] = INT_MAX; 
        sptSet[i] = 0;
        parent[i] = -1; 
    }
    dist[0] = 0;
    for (count = 0; count < V - 1; count++) {
        int min = INT_MAX, u;
        for  (v = 0; v < V; v++) {
            if (!sptSet[v] && dist[v] <= min) {
                min = dist[v];
                u = v;
            }
        }
        sptSet[u] = 1;
        for ( v = 0; v < V; v++) {
            
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                parent[v] = u; // Update the parent to reconstruct the path
            }
        }
    }
    printf("Vertex\t Distance from Source\t Path\n");
    for ( i = 0; i < V; i++) {
        printf("%d \t %d \t\t\t", i, dist[i]);
        int path = i;
        printf("%d", path);
        while (parent[path] != -1) {
            path = parent[path];
            printf(" <- %d", path);
        }
        printf("\n");
    }
    return 0;
}
}
